plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.robi.oauth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	/* # Gradle 3.4부터 사용되는 종속성 구성 #
	 - Referenced from : https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html?hl=ko
	 1. implementation:
		컴파일 타임에는 모듈에 종속성을 사용할 수 있으며,
		런타임에만 모듈 소비자에게 종속성을 사용할 수 있습니다.
		대규모의 다중 프로젝트 빌드에서 api/compile 대신 implementation을 사용하면
		빌드 시스템이 재컴파일해야 하는 프로젝트의 크기가 줄어들기 때문에 빌드 시간이
		상당히 개선될 수 있습니다. 대부분의 앱과 테스트 모듈은 이 구성을 사용해야 합니다.
		(의존 라이브러리 수정시 본 모듈까지만 재빌드 -기존: compile)
	 
	 2. api:
	 	컴파일 타임에는 모듈에 종속성을 사용할 수 있으며,
		컴파일 타임과 런타임에는 모듈 소비자에게도 종속성을 사용할 수 있습니다. 
		일반적으로 이 구성은 라이브러리 모듈에서만 사용해야 합니다.
		API를 별도 테스트 모듈에 노출시키지 않으려면, 앱 모듈이 implementation을 사용해야 합니다.
	 	(의존 라이브러리 수정시 본 모듈을 의존하는 모듈들도 재빌드 -기존: compile)

	 3. compileOnly:
		컴파일 타임에만 모듈에 종속성을 사용할 수 있으며,
		컴파일 타임이나 런타임에는 소비자에게 종속성을 사용할 수 없습니다.
		(compile 시에만 빌드하고 빌드 결과물에는 포함하지 않음 -기존: provided)
		
	 4. runtimeOnly:
	 	런타임에만 모듈과 모듈 소비자에게 종속성을 사용할 수 있습니다.
	 	(runtime 시에만 필요한 라이브러리인 경우 -기존: apk)
	 
	 5. annotationProcessor:
		이전 버전의 Gradle용 Android 플러그인에서는 컴파일 클래스 경로상의 종속성이
		프로세서 클래스 경로에 자동으로 추가되었습니다. 즉, 주석 프로세서를 컴파일 클래스
		경로에 추가할 수 있으며 예상대로 작동할 것입니다. 그러나 이 경우 대량의 불필요한
		종속성이 프로세서에 추가되어 성능에 상당한 영향을 미칩니다.
		(ex: annotationProcessor 'com.google.dagger:dagger-compiler:<version-number>')
	*/

	// Servlet 4.0.0
	implementation 'javax.servlet:javax.servlet-api:4.0.0'

	// JSTL
	implementation 'javax.servlet:jstl'

	// Spring Boot Starter
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat' // tomcat
	implementation 'org.springframework.boot:spring-boot-starter-aop' // aop
	implementation 'org.springframework.boot:spring-boot-devtools' // livereload

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

}
