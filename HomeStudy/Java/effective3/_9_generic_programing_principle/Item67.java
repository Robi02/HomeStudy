package _9_generic_programing_principle;

public class Item67 {
    /**
     * [Item67] 최적화는 신중히 하라
     * 
     * [핵심]
     * 빠른 프로그램을 작성하려 안달하지 말자. 좋은 프로그램을 작성하다 보면 성능은 따라 오기 마련이다.
     * 하지만 시스템을 설계할 때, 특히 API, 네트웤 ㅡ프로토콜, 영구 저장용 데이터 포멧을 설계할 때는
     * 성능을 염두해 두어야 한다.
     * 시스템 구현을 완료했다면 이제 성능을 측정해보라. 충분히 빠르면 그것으로 끝이다.
     * 그렇지 않다면 프로파일러를 사용해 문제의 원인이 되는 지점을 찾아 최적화를 수행하라.
     * 가장 먼저 어떤 알고리즘을 사용했는지를 살펴보자. 알고리즘을 잘못 골랐다면 다른 저수준 최적화는
     * 아무리 해봐야 소용이 없다. 만족할 때까지 이 과정을 반복하고, 모든 변경 후에는 성능을 측정하라.
     * 
     * [조슈아 블로크가 전하는 최적화시 고려해야 할 사항]
     * 빠른 프로그램보다는 좋은 프로그램을 작성하라.
     * 성능을 제한하는 설계를 피하라.
     * API를 설계할 때 성능에 주는 영향을 고려하라.
     * 성능을 위해 API를 왜곡하는 건 매우 안 좋은 생각이다.
     * 각각의 최적화 시도 전후로 성능을 측정하라.
     * 
     * [최적화에 관련된 3가지 격언]
     * 1. (맹목적 어리석음을 포함해) 그 어떤 핑계보다 효율성이라는
     *    이름 아래 행해진 컴퓨팅 죄악이 더 많다. (심지어 효율을 높이지도 못하면서)
     *    -월리엄 울프
     *
     * 2. (전체의 97% 정도인) 자그마한 효율성은 모두 잊자. 섣부른 최적화가 만악의 근원이다.
     *    -도널드 크누스
     * 
     * 3. 최적화를 할 때는 다음 두 규칙을 따르라.
     *    첫 번째, 하지 마라.
     *    두 번째, (전문가 한정) 아직 하지 마라. 다시 말해,
     *    완전히 명백하고 최적화되지 않은 해법을 찾을 때까지는 하지 마라.
     *    -M.A.잭슨
     * 
     */
}