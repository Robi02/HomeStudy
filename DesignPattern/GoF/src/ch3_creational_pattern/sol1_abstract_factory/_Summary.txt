[구분]
 생성 패턴

[이름]
 추상 팩토리 (Abstract Factory)

[의도]
 상세화된 서브클래스를 정의하지 않고도 서로 관련성이 있거나
 독립적인 여러 객체의 군을 생성하기 위한 인터페이스를 제공.

[다른 이름]
 - 키트(Kit)

[활용성]
 1) 객체가 생성되거나 구성,표현되는 방식과 무관하게 시스템을 독립적으로 만들고자 할 때.
 2) 여러 제품군 중 하나를 선택해서 시스템을 설정해야 하고 한번 구성한 제품을 다른 것으로 대체할 수 있을 때.
 3) 관련된 제품 객체들이 함게 사용되도록 설계되었고, 이 부분에 대한 제약이 외부에도 지켜지도록 하고 싶을 때.
 4) 제품에 대한 클래스 라이브러리를 제공하고 ,그들의 구현이 아닌 인터페이스를 노출시키고 싶을 때.

[결과]
 1. 구체적인 클래스를 분리.
  -> 구체적인 구현 클래스가 사용자에게서 분리되고, 인터페이스를 통해서만 인스턴스를 조작.
 2. 제품군을 쉽게 대체할 수 있도록 함.
  -> 구체 팩토리 클래스는 오직 한 번 등장하므로 쉽게 변경할 수 있음.
 3. 제품 사이의 일관성을 증진.
  -> 코드 어디에서든 동일한 구조의 객체를 획득, 일관성을 쉽게 보장할 수 있음.
 4. 새로운 종류의 제품을 제공하기 어려움. (단점)
  -> 기존 추상 팩토리의 확장은 어려운 작업. 인터페이스가 변경되는 제품이 추가되거나,
     반환 객체 타입이 변경되면 이를 상속받는 모든 서브클래스가 변경되어야 함.
